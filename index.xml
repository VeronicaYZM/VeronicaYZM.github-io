<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>VeronicaYZM</title>
    <link>https://VeronicaYZM.github.io/</link>
    <description>Recent content on VeronicaYZM</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright © 2008–2019, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Tue, 28 May 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://VeronicaYZM.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>正则表达式(1)</title>
      <link>https://VeronicaYZM.github.io/blog/zhengze/</link>
      <pubDate>Wed, 29 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://VeronicaYZM.github.io/blog/zhengze/</guid>
      <description>正则表达式(1)  特殊字符：    ^ :以某个字符串开头 例如 + :至少出现一次 . :点后面的任意字符（一个字符） * :前面的字符出现任意多次 例子：“^b.”:b开头中间出现的任意字符，中间字符出现任意多次 的字符串 使用re.match(条件,目标字符串)进行匹配。 $ :以$前面的字符结尾 ? :非贪婪匹配，默认情况下(.*)匹配字符串是贪婪匹配即默认开始一直匹配到最右边 （从右边开始匹配第一个符合要求字符串），而非贪婪匹配时从左开始匹配第一个符合要求的字符串这样就行了 (.*?)    例子：string =.*(b.*b).* 提取括号里面的东西string.group(1)这里是第一个括号里面的匹配结构(这里只有一个括号，所以你写.group（2）会报错)  {n，m}：表示数字至少出现n次最多出现m次 例子：string =.*(b.{n,m}b).*表示两个b之间的任意字符最少出现n，最多出现m次数的字符串 | ：或关系 [] : (1)只要满足中括号里面的任意一个字符 (2)[0-9]{9}:这个表示的意思是在0到9之间的任意九位字符 (3)[^1]{9}:这里的意思时不包含1字符的九位字符    例子：string =[abcdk]ora ,表示中括号里的任意字符组合后面的括号外 字符（普通字符）（这里要注意[.*]这个例子里面.和*就仅仅是字符）  \s:空格 \S:不为空格 \w:任意字符，类似[A-Za-z0-9_]但不包含空格 \W:和\w相反，不包含\w里面的包含的任意一个字符，因此这里可以查阅空格    例子：string =“b\sb”：两个b之间有一个空格的字符串string =“b\Sb”：两个b之间有一个非空格的字符串(注意：双b之间只有一个字符)  [\u4E00-\u9FA5] : 需要提取的一个汉字，你想提取多个的后面加一个+就行了 \d:代表数字的意思   </description>
    </item>
    
    <item>
      <title></title>
      <link>https://VeronicaYZM.github.io/posts/post1/</link>
      <pubDate>Sat, 11 Apr 2020 18:49:01 +0200</pubDate>
      
      <guid>https://VeronicaYZM.github.io/posts/post1/</guid>
      <description>welcome to my place</description>
    </item>
    
    <item>
      <title></title>
      <link>https://VeronicaYZM.github.io/posts/post2/</link>
      <pubDate>Sat, 11 Apr 2020 18:49:01 +0200</pubDate>
      
      <guid>https://VeronicaYZM.github.io/posts/post2/</guid>
      <description>this is a micro blog used for short updates and link sharing, you can configure its behavior in config.toml</description>
    </item>
    
    <item>
      <title></title>
      <link>https://VeronicaYZM.github.io/archives/</link>
      <pubDate>Tue, 28 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://VeronicaYZM.github.io/archives/</guid>
      <description></description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://VeronicaYZM.github.io/about/</link>
      <pubDate>Thu, 28 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://VeronicaYZM.github.io/about/</guid>
      <description>Written in Go, Hugo is an open source static site generator available under the Apache Licence 2.0. Hugo supports TOML, YAML and JSON data file types, Markdown and HTML content files and uses shortcodes to add rich content. Other notable features are taxonomies, multilingual mode, image processing, custom output formats, HTML/CSS/JS minification and support for Sass SCSS workflows.
Hugo makes use of a variety of open source projects including:
 https://github.</description>
    </item>
    
    <item>
      <title>get in touch</title>
      <link>https://VeronicaYZM.github.io/contact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://VeronicaYZM.github.io/contact/</guid>
      <description>Send</description>
    </item>
    
    <item>
      <title>线程与进程(1)</title>
      <link>https://VeronicaYZM.github.io/blog/thread_python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://VeronicaYZM.github.io/blog/thread_python/</guid>
      <description>多线程与多进程(1)   gil:    gil global interpreter lock (cpython)全局解释器锁 这个玩意其实本质上算是一个阻止多进程并发，为了“thread-safe”，确保同一时刻只有一个线程在CPU上执行一个字节码,类似bug一般的存在，局限性很大，遇见IO操作主动释放，也会根据执行字节码行数，时间来释放 这里推荐一个大佬的博客,解释的很详细 博客链接     多线程的两种编程方式：   (1)通过thread类实例化，适用于代码量较小情况
  thread1 = threading.Thread(target=Function，arg=(res,))  (2) 通过继承thread类来实现多线程
   3.线程同步：
  一个线程运行，其他线程排队等待，直到该线程运行完成 线程同步使用到的模块：    (1)thread模块的Lock():    互斥锁&amp;ndash;最为低级的同步指令。这个锁作用是可以让这两个线程交替运行,但是锁同样会影响系统性能且容易引起死锁 代码示例：
     def add(lock):global totalfor i in range (1000000):lock.acquire()total+=1lock.release()def desc(lock):global totalfor i in range (1000000):lock.</description>
    </item>
    
  </channel>
</rss>