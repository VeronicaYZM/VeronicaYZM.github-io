<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>process on VeronicaYZM</title>
    <link>https://VeronicaYZM.github.io/tags/process/</link>
    <description>Recent content in process on VeronicaYZM</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright © 2008–2019, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    
	<atom:link href="https://VeronicaYZM.github.io/tags/process/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>线程与进程(1)</title>
      <link>https://VeronicaYZM.github.io/blog/thread_python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://VeronicaYZM.github.io/blog/thread_python/</guid>
      <description>多线程与多进程(1)   gil:    gil global interpreter lock (cpython)全局解释器锁 这个玩意其实本质上算是一个阻止多进程并发，为了“thread-safe”，确保同一时刻只有一个线程在CPU上执行一个字节码,类似bug一般的存在，局限性很大，遇见IO操作主动释放，也会根据执行字节码行数，时间来释放 这里推荐一个大佬的博客,解释的很详细 博客链接     多线程的两种编程方式：   (1)通过thread类实例化，适用于代码量较小情况
  thread1 = threading.Thread(target=Function，arg=(res,))  (2) 通过继承thread类来实现多线程
   3.线程同步：
  一个线程运行，其他线程排队等待，直到该线程运行完成 线程同步使用到的模块：    (1)thread模块的Lock():    互斥锁&amp;ndash;最为低级的同步指令。这个锁作用是可以让这两个线程交替运行,但是锁同样会影响系统性能且容易引起死锁 代码示例：
     def add(lock):global totalfor i in range (1000000):lock.acquire()total+=1lock.release()def desc(lock):global totalfor i in range (1000000):lock.</description>
    </item>
    
  </channel>
</rss>